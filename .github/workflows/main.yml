name: Vapor CD Pipeline

on:
    workflow_run:
        workflows: ["Vapor CI Pipeline"] # Docker 이미지를 빌드하고 푸시한 후 배포
        types:
            - completed

jobs:
    deploy:
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        runs-on: [self-hosted, oracle, ARM64, kinest1997]

        steps:
            - name: Login DockerHub
              env:
                  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
                  DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
              run: sudo echo $DOCKER_PASSWORD | sudo docker login -u $DOCKER_USERNAME --password-stdin

            - name: Checkout code
              uses: actions/checkout@v3

            - name: Pull Docker image
              run: |
                  sudo docker pull stevenkais/kinest1997:vapor
                  sudo docker image prune -f

            - name: Determine current active deployment
              id: current_deployment
              run: |
                  if sudo docker ps | grep -q vapor_app_blue; then
                    echo "current=blue" >> $GITHUB_OUTPUT
                    echo "target=green" >> $GITHUB_OUTPUT
                  elif sudo docker ps | grep -q vapor_app_green; then
                    echo "current=green" >> $GITHUB_OUTPUT
                    echo "target=blue" >> $GITHUB_OUTPUT
                  else
                    echo "No containers running. Starting with blue."
                    echo "current=none" >> $GITHUB_OUTPUT
                    echo "target=blue" >> $GITHUB_OUTPUT
                  fi

            - name: Stop and remove existing target container
              run: |
                  sudo docker compose stop vapor_app_${{ steps.current_deployment.outputs.target }}
                  sudo docker compose rm -f vapor_app_${{ steps.current_deployment.outputs.target }}

            - name: Deploy new version
              run: |
                  sudo docker compose pull
                  sudo docker compose up -d --force-recreate vapor_app_${{ steps.current_deployment.outputs.target }}

            - name: Wait for new deployment to be ready
              run: |
                  echo "Waiting for new deployment to be ready..."
                  sleep 30
                  echo "Proceeding with deployment"

            - name: Update Nginx configuration
              run: |
                  sudo sed -i 's/server localhost:808[12];/server localhost:808${{ steps.current_deployment.outputs.target == 'blue' && '1' || '2' }};/' /etc/nginx/sites-enabled/kinest1997.com
                  sudo sed -i 's/server localhost:808[12] backup;/server localhost:808${{ steps.current_deployment.outputs.target == 'blue' && '2' || '1' }} backup;/' /etc/nginx/sites-enabled/kinest1997.com
                  sudo nginx -s reload

            - name: Wait for traffic to switch
              run: sleep 15

            - name: Stop and remove old deployment
              if: steps.current_deployment.outputs.current != 'none'
              run: |
                  sudo docker compose stop vapor_app_${{ steps.current_deployment.outputs.current }}
                  sudo docker compose rm -f vapor_app_${{ steps.current_deployment.outputs.current }}

            - name: Clean up Docker resources
              run: |
                  sudo docker container prune -f
                  sudo docker image prune -a -f
                  sudo docker volume prune -f
